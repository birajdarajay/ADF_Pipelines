{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFINSTANCEAJAYBIRAJDAR"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ReadJsonOutputoActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Read Jason Output of one Activity into another Activity",
				"activities": [
					{
						"name": "FileLoaction",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "InputFolderlocation",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ReadJsonOutput",
						"description": "ReadJsonOutput",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FileLoaction",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FileLoaction').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "AssignFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"FileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-16T08:10:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ScriptActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SqlScript",
						"description": "Execution of sql scripts",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LinkServiceOracleIntegrationRuntime",
							"type": "LinkedServiceReference",
							"parameters": {
								"username": "Ajay",
								"host": "DESKTOP-E9268CJ",
								"port": 1521,
								"servicename": "orcl.168.25.203",
								"password": "welcome1"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "Name",
											"type": "String",
											"value": "Ajay",
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": "select * from emp\nselect * from dept"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-19T06:32:37Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SwitchActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.FolderName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Output1",
									"activities": [
										{
											"name": "Copy data1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "InputDataSet",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "SwitchCaseOutputDataSet",
													"type": "DatasetReference",
													"parameters": {
														"Folder": {
															"value": "@pipeline().parameters.FolderName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "Output2",
									"activities": [
										{
											"name": "Copy data2",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "InputDataSet",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "SwitchCaseOutputDataSet",
													"type": "DatasetReference",
													"parameters": {
														"Folder": {
															"value": "@pipeline().parameters.FolderName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderName": {
						"type": "string",
						"defaultValue": "Output1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-02T10:50:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UntilActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('IsFileAvailable'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "InputDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(activity('Get Metadata1').output.exists)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 20
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "IsFileAvailable",
													"value": "true"
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"IsFileAvailable": {
						"type": "String",
						"defaultValue": "false"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-02T09:30:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDelete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "OutputDataSet",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-30T11:32:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetOracleDBDemo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkServiceOracleIntegrationRuntime",
					"type": "LinkedServiceReference",
					"parameters": {
						"username": {
							"value": "@dataset().userName",
							"type": "Expression"
						},
						"host": "DESKTOP-E9268CJ",
						"port": 1521,
						"servicename": "orcl.168.25.203",
						"password": "welcome1"
					}
				},
				"parameters": {
					"userName": {
						"type": "String"
					},
					"SchemaName": {
						"type": "String"
					},
					"TableName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "FOLDER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FOLDER_NAME",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cached_Lookup_Transformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeSource",
							"description": "EmployeeSource"
						},
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "Emp",
							"description": "Emp"
						}
					],
					"sinks": [
						{
							"name": "CacheSink",
							"description": "CacheSink"
						},
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "CachedOutput",
							"description": "CachedOutput"
						}
					],
					"transformations": [
						{
							"name": "MaxEMPLOYEEID",
							"description": "MaxEMPLOYEEID"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> EmployeeSource",
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Emp",
						"EmployeeSource aggregate(EMPLOYEE_ID = max(EMPLOYEE_ID)) ~> MaxEMPLOYEEID",
						"Emp keyGenerate(output(IncrementalID as long),",
						"     startAt: 27L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(EMPLOYEE_ID = EMPLOYEE_ID + CacheSink#outputs()[1].MAX_EMPLOYEE_ID) ~> derivedColumn1",
						"MaxEMPLOYEEID sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          MAX_EMPLOYEE_ID = EMPLOYEE_ID",
						"     )) ~> CacheSink",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['CachedOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> CachedOutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CastTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmpSource",
							"description": "EmpSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "CastTransformationOutput",
							"description": "CastTransformationOutput"
						}
					],
					"transformations": [
						{
							"name": "ConvertingDataType",
							"description": "ConvertingDataType"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpSource",
						"EmpSource cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          HIRE_DATE as date 'dd-MM-yyyy'",
						"     ),",
						"     errors: true) ~> ConvertingDataType",
						"ConvertingDataType sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['CastTransformationOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> CastTransformationOutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConditionalSplitDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeDataSource",
							"description": "EmployeeDataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "OutputSetA"
						},
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "OutputSetB",
							"description": "OutputSetB"
						},
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "outputRemainingEmployee",
							"description": "outputRemainingEmployee"
						}
					],
					"transformations": [
						{
							"name": "DEPTwiseData",
							"description": "SETA"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeDataSource",
						"EmployeeDataSource split(equals(DEPARTMENT_ID,'10'),",
						"     equals(DEPARTMENT_ID,'20'),",
						"     disjoint: false) ~> DEPTwiseData@(SETA, SETB, RemainingEmployee)",
						"DEPTwiseData@SETA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['SETA'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSetA",
						"DEPTwiseData@SETB sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['OutputSetB'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSetB",
						"DEPTwiseData@RemainingEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['outputRemainingEmployee'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> outputRemainingEmployee"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CountEmployeeDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeSource",
							"description": "EmployeeSource"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DeptData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "TotalEMPDeptWise",
							"description": "TotalEMPDeptWise"
						}
					],
					"transformations": [
						{
							"name": "AggregateCountEmployee",
							"description": "AggregateCountEmployee"
						},
						{
							"name": "EMPDEPTDATA"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeSource",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DeptData",
						"EmployeeSource aggregate(groupBy(DEPARTMENT_ID),",
						"     EMPLOYEE_ID = count(EMPLOYEE_ID)) ~> AggregateCountEmployee",
						"AggregateCountEmployee, DeptData join(AggregateCountEmployee@DEPARTMENT_ID == DeptData@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> EMPDEPTDATA",
						"EMPDEPTDATA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['CountEMPDeptWise'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {DEPARTMENT NAME} = DEPARTMENT_NAME,",
						"          {TOTAL EMPLOYEE } = EMPLOYEE_ID",
						"     ),",
						"     partitionBy('hash', 1)) ~> TotalEMPDeptWise"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DerivedEntityDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeedataSource",
							"description": "EmployeedataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "DerivedEntityOutput",
							"description": "DerivedEntityOutput"
						}
					],
					"transformations": [
						{
							"name": "CommisionDerivedColumn",
							"description": "CommisionDerivedColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeedataSource",
						"EmployeedataSource derive(COMMISSION_PCT = iif(isNull(COMMISSION_PCT),'0','1 %')) ~> CommisionDerivedColumn",
						"CommisionDerivedColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeNew'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DerivedEntityOutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpDeptDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EMPSource",
							"description": "EMPSource"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DEPTSource",
							"description": "DEPTSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "OutputData",
							"description": "OutputData"
						}
					],
					"transformations": [
						{
							"name": "JoinEMPDEPT"
						},
						{
							"name": "ModifyColumns1",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EMPSource",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DEPTSource",
						"EMPSource, DEPTSource join(EMPSource@DEPARTMENT_ID == DEPTSource@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEMPDEPT",
						"JoinEMPDEPT derive(LAST_NAME = upper(LAST_NAME),",
						"          FIRST_NAME = upper(LAST_NAME)) ~> ModifyColumns1",
						"ModifyColumns1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Emp_dept_output_data'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          SALARY,",
						"          DEPARTMENT_NAME",
						"     ),",
						"     partitionBy('hash', 1)) ~> OutputData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExistandNonExistDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeDataSource"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DeptDataSource",
							"description": "DeptDataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "ExistEntityOutput",
							"description": "ExistEntityOutput"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeDataSource",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DeptDataSource",
						"EmployeeDataSource, DeptDataSource exists(EmployeeDataSource@DEPARTMENT_ID == DeptDataSource@DEPARTMENT_ID,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ExistEmployeeoutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExistEntityOutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FilterDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "FilterDataSource",
							"description": "FilterDataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "FilterOutput",
							"description": "FilterOutput"
						}
					],
					"transformations": [
						{
							"name": "DeptFilter",
							"description": "DeptFilter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FilterDataSource",
						"FilterDataSource filter(equals(DEPARTMENT_ID,'110')) ~> DeptFilter",
						"DeptFilter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FilterEmpData'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> FilterOutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flatten Transformation dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeJSonDatasource",
								"type": "DatasetReference"
							},
							"name": "EmployeeJsonSource",
							"description": "EmployeeJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "JS",
								"type": "DatasetReference"
							},
							"name": "FlattenTransformationOutput",
							"description": "FlattenTransformationOutput"
						}
					],
					"transformations": [
						{
							"name": "FlattenTransformation"
						}
					],
					"scriptLines": [
						"source(output(",
						"          employees as (Address as (Country as string, State as string, ZipCode as integer), Contact as (Email as string, Mobile as long), Id as short, Skill as string[], name as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> EmployeeJsonSource",
						"EmployeeJsonSource foldDown(unroll(employees.Skill),",
						"     mapColumn(",
						"          Skill = employees.Skill,",
						"          Id = employees.Id,",
						"          Address = employees.Address,",
						"          Contact = employees.Contact",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTransformation",
						"FlattenTransformation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FlattenTransformationOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> FlattenTransformationOutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FuzzyJoinDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Sales",
								"type": "DatasetReference"
							},
							"name": "Sales",
							"description": "Sales"
						},
						{
							"dataset": {
								"referenceName": "Sales1",
								"type": "DatasetReference"
							},
							"name": "Sales1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "FuzzyJoinOutput",
							"description": "FuzzyJoinOutput"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Name } as string,",
						"          total_sales as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     ignoreNoFilesFound: false) ~> Sales",
						"source(output(",
						"          {Name } as string,",
						"          total_sales as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Sales1",
						"Sales, Sales1 join(fuzzyCompare(Sales@{Name }, Sales1@{Name }, 66.00),",
						"     joinType:'inner',",
						"     matchType:'fuzzy',",
						"     ignoreSpaces: false,",
						"     broadcast: 'off')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FuzzyJoinOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> FuzzyJoinOutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeSource",
							"description": "EmployeeSource"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DepartmentSource",
							"description": "DepartmentSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "LookupOutput",
							"description": "LookupOutput"
						}
					],
					"transformations": [
						{
							"name": "EmployeeLookup",
							"description": "EmployeeLookup"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeSource",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DepartmentSource",
						"EmployeeSource, DepartmentSource lookup(EmployeeSource@DEPARTMENT_ID == DepartmentSource@DEPARTMENT_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> EmployeeLookup",
						"EmployeeLookup sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['LookupOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> LookupOutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NewBranchDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeSource",
							"description": "EmployeeSource"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "Department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "NewBranchOutput",
							"description": "NewBranchOutput"
						},
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "TotalEmp",
							"description": "TotalEmp"
						}
					],
					"transformations": [
						{
							"name": "CountOfEmployee",
							"description": "CountOfEmployee"
						},
						{
							"name": "EmpDeptJoin",
							"description": "Inner join on 'EmployeeSource' and 'DepartmentSource'"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeSource",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Department",
						"EmployeeSource aggregate(groupBy(DEPARTMENT_ID),",
						"     All_employee = count(EMPLOYEE_ID)) ~> CountOfEmployee",
						"EmployeeSource, Department join(EmployeeSource@DEPARTMENT_ID == Department@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> EmpDeptJoin",
						"EmpDeptJoin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['NewBranchOutput1'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> NewBranchOutput",
						"CountOfEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['TotEMP'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> TotalEmp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParseTranformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParseTransformJsonInput",
								"type": "DatasetReference"
							},
							"name": "EMployeeJson",
							"description": "EMployeeJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "JS",
								"type": "DatasetReference"
							},
							"name": "OutputSink",
							"description": "OutputSink"
						}
					],
					"transformations": [
						{
							"name": "parse1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Skill as string,",
						"          Id as integer,",
						"          Address as (Country as string, State as string, ZipCode as integer),",
						"          Contact as (Email as string, Mobile as integer)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> EMployeeJson",
						"EMployeeJson parse(ParseAddress = Skill ? (Country as string,",
						"          State as string),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: ',',",
						"     nullValue: '') ~> parse1",
						"parse1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['OutputSink'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSink"
					]
				}
			},
			"dependsOn": []
		}
	]
}