{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFINSTANCEAJAYBIRAJDAR"
		},
		"LinkServiceOracleIntegrationRuntime_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkServiceOracleIntegrationRuntime'",
			"defaultValue": "host=@{linkedService().host};port=@{linkedService().port};serviceName=@{linkedService().servicename};user id=@{linkedService().username};Password=@{linkedService().password}"
		},
		"LinkService_CopyData_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkService_CopyData'"
		},
		"SqlServerLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServerLinkedService'"
		},
		"DyanmicVariable_pagination_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://pokeapi.co/api/v2/pokemon?offset=20&limit={offset}"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://pokeapi.co/api/v2/pokemon"
		},
		"EventBasedTriggered_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/1b80b2ab-6c01-4393-ae53-3aefeb14943f/resourceGroups/ADF_TEST_RESOURCE_GROUP/providers/Microsoft.Storage/storageAccounts/demostorageajaybirajdar"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AggregateDataflowPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AggregateDataFlow",
						"description": "AggregateDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CountEmployeeDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmployeeSource": {},
									"DeptData": {},
									"TotalEMPDeptWise": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-08T05:43:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CountEmployeeDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConditionalPipelineDFPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Conditional Split Data flow",
						"description": "Conditional Split Data flow ",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ConditionalSplitDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmployeeDataSource": {},
									"OutputSetA": {},
									"OutputSetB": {},
									"outputRemainingEmployee": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-08T06:35:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ConditionalSplitDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyActPaginationRuleDynamicParameter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "CopyActPaginationRuleDynamicParameter",
				"activities": [
					{
						"name": "CopyActivityPaginationRule",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"QueryParameters.offset": "RANGE:0:1279:20"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "[['url']"
										},
										"sink": {
											"name": "url"
										}
									}
								],
								"collectionReference": "$['results']"
							}
						},
						"inputs": [
							{
								"referenceName": "Dyanamic_variable_for_pagination",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RestapiOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-20T09:18:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Dyanamic_variable_for_pagination')]",
				"[concat(variables('factoryId'), '/datasets/RestapiOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyActivityPaginationRule')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyActivityPaginationRule",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "[['url']"
										},
										"sink": {
											"name": "url"
										}
									}
								],
								"collectionReference": "$['results']"
							}
						},
						"inputs": [
							{
								"referenceName": "PaginationRule",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RestapiOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-20T07:44:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PaginationRule')]",
				"[concat(variables('factoryId'), '/datasets/RestapiOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateVariablePipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set value for file type",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileType",
							"value": {
								"value": "@replace(pipeline().parameters.FileName, 'Sales','')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Append variable Value",
						"description": "Append variable Value",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Set value for file type",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ListOfFiles",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "DailySales"
					},
					"FileNames": {
						"type": "array",
						"defaultValue": [
							"SalesIndia.txt"
						]
					}
				},
				"variables": {
					"FileType": {
						"type": "String"
					},
					"ListOfFiles": {
						"type": "Array",
						"defaultValue": [
							"SalesUS",
							"SalesUK"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-30T11:44:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeactivateActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "DeactivateActivityPipeline",
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"enableStaging": false
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					},
					{
						"name": "Wait2",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-20T09:18:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DerivedEntityDFPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DerivedEntityDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DerivedEntityDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmployeedataSource": {},
									"DerivedEntityOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-08T09:54:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DerivedEntityDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpDeptDataFlowPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EmpDeptDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EMPSource": {},
									"DEPTSource": {},
									"OutputData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-07T07:04:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EmpDeptDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExistDFPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExistNonExistDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ExistandNonExistDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmployeeDataSource": {},
									"DeptDataSource": {},
									"ExistEntityOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-08T10:17:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ExistandNonExistDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FilterActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ArrayFilter",
						"type": "Filter",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ArrayList",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item(), 3)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ArrayList": {
						"type": "array",
						"defaultValue": [
							"1",
							"2",
							"3",
							"4",
							"5"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-02T07:40:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FilterDataFlowPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FilterDataDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FilterDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"FilterDataSource": {},
									"FilterOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-07T09:07:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FilterDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForeachActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.OutputFolders",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "InputDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ForeachInputDataSet",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"OutputFolders": {
						"type": "array",
						"defaultValue": [
							"Output1",
							"Output2",
							"Output3"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-02T08:12:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputDataSet')]",
				"[concat(variables('factoryId'), '/datasets/ForeachInputDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetMetadataAndifActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "InputDataSet",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\r\n    formatDateTime(utcNow(),'yyyy-mm-dd'),\r\nformatDateTime(activity('Get Metadata1').output.lastModified,'yyyy-mm-dd')\r\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MasterPipelineInvokeAnotherPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "InputDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "OutputDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-02T08:42:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputDataSet')]",
				"[concat(variables('factoryId'), '/pipelines/MasterPipelineInvokeAnotherPipeline')]",
				"[concat(variables('factoryId'), '/datasets/OutputDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupActivityForMultiplefilePipiline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select emp_id from EMP",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "DatasetOracleDBDemo",
								"type": "DatasetReference",
								"parameters": {
									"userName": "AJAY",
									"SchemaName": "AJAY",
									"TableName": "EMP"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "InputDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "LookupActivityOutputDataset",
											"type": "DatasetReference",
											"parameters": {
												"Folder": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-04T08:00:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetOracleDBDemo')]",
				"[concat(variables('factoryId'), '/datasets/InputDataSet')]",
				"[concat(variables('factoryId'), '/datasets/LookupActivityOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupActivityPipiline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "DatasetOracleDBDemo",
								"type": "DatasetReference",
								"parameters": {
									"userName": "AJAY",
									"SchemaName": "AJAY",
									"TableName": "EMP"
								}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "InputDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "LookupActivityOutputDataset",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@activity('Lookup1').output.firstRow.emp_id",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-04T10:07:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetOracleDBDemo')]",
				"[concat(variables('factoryId'), '/datasets/InputDataSet')]",
				"[concat(variables('factoryId'), '/datasets/LookupActivityOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupDFPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupDF",
						"description": "LookupDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LookupDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmployeeSource": {},
									"DepartmentSource": {},
									"LookupOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-09T06:46:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LookupDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MasterPipelineInvokeAnotherPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "InvokingAnotherPipeline",
						"description": "Invoking Another pipeline from master pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PipelineCopyDataFromOracleDB",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceUserName": "AJAY",
								"SourceSchemaName": "AJAY",
								"SourceTableName": "EMP",
								"TargetUserName": "ATM",
								"TargetSchemaName": "ATM",
								"TargetTableName": "EMP"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-02T07:40:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PipelineCopyDataFromOracleDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NewBranchDFPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "NewBranchDFPipeline",
				"activities": [
					{
						"name": "NewBranchDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "NewBranchDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmployeeSource": {},
									"Department": {},
									"NewBranchOutput": {},
									"TotalEmp": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-09T07:42:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/NewBranchDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineCopyDataFromFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataDemo",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": true
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LinkService_CopyData",
										"type": "LinkedServiceReference"
									}
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InputDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OutputDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-18T07:29:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputDataSet')]",
				"[concat(variables('factoryId'), '/datasets/OutputDataSet')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineCopyDataFromOracleDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "OracleSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatasetOracleDBDemo",
								"type": "DatasetReference",
								"parameters": {
									"userName": {
										"value": "@pipeline().parameters.SourceUserName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SourceSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.SourceTableName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DatasetOracleDBDemo",
								"type": "DatasetReference",
								"parameters": {
									"userName": {
										"value": "@pipeline().parameters.TargetUserName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.TargetSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TargetTableName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceUserName": {
						"type": "String"
					},
					"SourceSchemaName": {
						"type": "String"
					},
					"SourceTableName": {
						"type": "String"
					},
					"TargetUserName": {
						"type": "String"
					},
					"TargetSchemaName": {
						"type": "String"
					},
					"TargetTableName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-30T10:31:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetOracleDBDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineCopyDataFromOracleDBHardcoded')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"description": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "@{'ATM'}.@{'EMP'}"
							},
							{
								"name": "Destination",
								"value": "@{'AJAY'}.@{'EMP'}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "OracleSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "EMP_ID",
											"type": "Decimal"
										},
										"sink": {
											"name": "EMP_ID",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "NAME",
											"type": "String"
										},
										"sink": {
											"name": "NAME",
											"type": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatasetOracleDBDemo",
								"type": "DatasetReference",
								"parameters": {
									"userName": "ATM",
									"SchemaName": "ATM",
									"TableName": "EMP"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DatasetOracleDBDemo",
								"type": "DatasetReference",
								"parameters": {
									"userName": "AJAY",
									"SchemaName": "AJAY",
									"TableName": "EMP"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-30T10:45:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetOracleDBDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineReturnValueInvoke')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PipelineReturnVariable",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PipelineReturnVariable",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "PipelineReturnVariable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LinkServiceOracleIntegrationRuntime",
							"type": "LinkedServiceReference",
							"parameters": {
								"username": "Ajay",
								"host": "DESKTOP-E9268CJ",
								"port": 1521,
								"servicename": "orcl.168.25.203",
								"password": "welcome1"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@insert into emp values ('@{activity('PipelineReturnVariable').output.pipelineReturnValue.Run_name}','@{activity('PipelineReturnVariable').output.pipelineReturnValue.Run_id}')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-20T06:59:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PipelineReturnVariable')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracleIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineReturnVariable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "InputDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OutputDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "Run_name",
									"value": {
										"type": "String",
										"content": "Copy Pipeline"
									}
								},
								{
									"key": "Run_id",
									"value": {
										"type": "Expression",
										"content": "@pipeline().RunId"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-20T06:54:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputDataSet')]",
				"[concat(variables('factoryId'), '/datasets/OutputDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PivotDfPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "PivotDfPipeline",
				"activities": [
					{
						"name": "PivotDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PivotDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PivotEmpSource": {},
									"Pivotoutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-09T08:32:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PivotDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ReadJsonOutputoActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Read Jason Output of one Activity into another Activity",
				"activities": [
					{
						"name": "FileLoaction",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "InputFolderlocation",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ReadJsonOutput",
						"description": "ReadJsonOutput",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FileLoaction",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FileLoaction').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "AssignFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"FileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-16T08:10:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputFolderlocation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ScriptActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SqlScript",
						"description": "Execution of sql scripts",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LinkServiceOracleIntegrationRuntime",
							"type": "LinkedServiceReference",
							"parameters": {
								"username": "Ajay",
								"host": "DESKTOP-E9268CJ",
								"port": 1521,
								"servicename": "orcl.168.25.203",
								"password": "welcome1"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "Name",
											"type": "String",
											"value": "Ajay",
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": "select * from emp\nselect * from dept"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-19T06:32:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracleIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelectDFPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "SelectDFPipeline",
				"activities": [
					{
						"name": "SelectDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SelectDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmployeeData": {},
									"SelectDfOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-09T08:05:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SelectDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SortTransformatioDfPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SortTransformationDF",
						"description": "SortTransformationDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SortDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmployeeSource": {},
									"SortTransformationOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-09T06:53:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SortDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StoreProcedureActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Test",
							"value": "true"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Test": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-04T10:07:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SwitchActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.FolderName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Output1",
									"activities": [
										{
											"name": "Copy data1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "InputDataSet",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "SwitchCaseOutputDataSet",
													"type": "DatasetReference",
													"parameters": {
														"Folder": {
															"value": "@pipeline().parameters.FolderName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "Output2",
									"activities": [
										{
											"name": "Copy data2",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "InputDataSet",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "SwitchCaseOutputDataSet",
													"type": "DatasetReference",
													"parameters": {
														"Folder": {
															"value": "@pipeline().parameters.FolderName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FolderName": {
						"type": "string",
						"defaultValue": "Output1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-02T10:50:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SwitchCaseOutputDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnionDfPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UnionDataFlow",
						"description": "UnionDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "UnionDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmployeeDataSource": {},
									"DeptDataSource": {},
									"UnionDFOutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-08T11:11:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/UnionDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UntilActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('IsFileAvailable'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "InputDataSet",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(activity('Get Metadata1').output.exists)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 20
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "IsFileAvailable",
													"value": "true"
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"IsFileAvailable": {
						"type": "String",
						"defaultValue": "false"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-02T09:30:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ValidationActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FolderValidationActivity",
						"description": "It will check file is 2 MB or NOT perform the activity based on success and failue",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "InputDataSet",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.12:00:00",
							"sleep": 10,
							"minimumSize": 2
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FolderValidationActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "WaitActivityPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FolderValidationActivity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GetMetadataAndifActivityPipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-04T05:57:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputDataSet')]",
				"[concat(variables('factoryId'), '/pipelines/WaitActivityPipeline')]",
				"[concat(variables('factoryId'), '/pipelines/GetMetadataAndifActivityPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WaitActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitFor20Sec",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"WaitFor20Sec": {
						"type": "int",
						"defaultValue": 20
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-02T09:06:07Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WebActivityPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebGETmethod",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://dummy.restapiexample.com/api/v1/employees",
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "WebPOSTmethod",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebGETmethod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://dummy.restapiexample.com/api/v1/create",
							"method": "POST",
							"headers": {
								"content-type": "application\\json"
							},
							"body": {
								"name": "Ajay",
								"salary": "123",
								"age": "23"
							}
						}
					},
					{
						"name": "WebGETmethod_copy1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebPOSTmethod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://dummy.restapiexample.com/api/v1/employees",
							"method": "GET",
							"headers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-02T10:14:04Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WriteCacheSinkPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WriteCacheSinkPipeline",
				"activities": [
					{
						"name": "CacheOutput",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WriteCacheActivity",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "MaxSal",
							"value": {
								"value": "@activity('WriteCacheActivity').output.runStatus.output.CacheSink.value[0].Max_Sal",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WriteCacheActivity",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "WriteCacheSink",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpSource": {},
									"CacheSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"MaxSal": {
						"type": "Integer"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-18T09:31:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/WriteCacheSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDelete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "OutputDataSet",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-30T11:32:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OutputDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetOracleDBDemo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkServiceOracleIntegrationRuntime",
					"type": "LinkedServiceReference",
					"parameters": {
						"username": {
							"value": "@dataset().userName",
							"type": "Expression"
						},
						"host": "DESKTOP-E9268CJ",
						"port": 1521,
						"servicename": "orcl.168.25.203",
						"password": "welcome1"
					}
				},
				"parameters": {
					"userName": {
						"type": "String"
					},
					"SchemaName": {
						"type": "String"
					},
					"TableName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkServiceOracleIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DepartmentData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Department.csv",
						"folderPath": "Input",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dyanamic_variable_for_pagination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DyanmicVariable_pagination",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DyanmicVariable_pagination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EMPDataSorce')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employees.csv",
						"folderPath": "Input",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpDeptOutputDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Output",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpGenderSample')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "SampleEmpGender.csv",
						"folderPath": "Input",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeJSonDatasource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employee.json",
						"folderPath": "Input",
						"container": "adfdemo"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForeachInputDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": "adfdemo"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Sample_data.txt",
						"folderPath": "Input",
						"container": "adfdemo"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputFolderlocation')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Input",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Output",
						"container": "adfdemo"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupActivityOutputDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"container": "adfdemo"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "data.txt",
						"folderPath": "Output",
						"container": "adfdemo"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PaginationRule')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParseTransformJsonInput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "FlattenTransformationOutput",
						"folderPath": "Output",
						"container": "adfdemo"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Skill": {
							"type": "string"
						},
						"Id": {
							"type": "integer"
						},
						"Address": {
							"type": "object",
							"properties": {
								"Country": {
									"type": "string"
								},
								"State": {
									"type": "string"
								},
								"ZipCode": {
									"type": "integer"
								}
							}
						},
						"Contact": {
							"type": "object",
							"properties": {
								"Email": {
									"type": "string"
								},
								"Mobile": {
									"type": "integer"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PivotEmpSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Emppivot.csv",
						"folderPath": "Input",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "deptid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestapiOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "apidata.csv",
						"folderPath": "Output",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Sales.csv",
						"folderPath": "Input",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Name ",
						"type": "String"
					},
					{
						"name": "total_sales",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sales1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sales1.csv",
						"folderPath": "Input",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Name ",
						"type": "String"
					},
					{
						"name": "total_sales",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "FOLDER_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FOLDER_NAME",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SurrogateKeyEMPDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "SurrogatekeyEmp.csv",
						"folderPath": "Input",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emloyee_name",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "department_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SwitchCaseOutputDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"container": "adfdemo"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnpivotDataSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkService_CopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "UnpivotInput.csv",
						"folderPath": "Input",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PK\u0003\u0004\u0014\u0000\u0006\u0000\b\u0000\u0000\u0000!\u0000{��!z\u0001\u0000\u0000�\u0005\u0000\u0000\u0013\u0000\b\u0002[Content_Types].xml �\u0004\u0002(�\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000���n�0\u0010E���\u000f��\u00151tQU\u0015�E\u001f�\u0016\t�\u0001&�$\u0016�my\u0006",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkService_CopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DyanmicVariable_pagination')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "DyanmicVariable_pagination",
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('DyanmicVariable_pagination_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkServiceOracleIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "LinkServiceOracleIntegrationRuntim",
				"parameters": {
					"username": {
						"type": "String",
						"defaultValue": "Ajay"
					},
					"host": {
						"type": "string",
						"defaultValue": "DESKTOP-E9268CJ"
					},
					"port": {
						"type": "int",
						"defaultValue": 1521
					},
					"servicename": {
						"type": "string",
						"defaultValue": "orcl.168.25.203"
					},
					"password": {
						"type": "string",
						"defaultValue": "welcome1"
					}
				},
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('LinkServiceOracleIntegrationRuntime_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntimeDemo",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIntegrationRuntimeDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkService_CopyData')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "LinkService_CopyData",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkService_CopyData_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "SqlServerLinkedService",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServerLinkedService_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SQLServerLinkedService",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SQLServerLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EventBasedTriggered')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "EventBasedTriggered",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PipelineCopyDataFromFile",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "CreateVariablePipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/adfdemo/blobs/Input/",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('EventBasedTriggered_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated",
						"Microsoft.Storage.BlobDeleted"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PipelineCopyDataFromFile')]",
				"[concat(variables('factoryId'), '/pipelines/CreateVariablePipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TriggerScheduleDemo')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "TriggerDemo",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PipelineCopyDataFromFile",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-08-29T06:56:00Z",
						"endTime": "2023-09-02T22:56:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								5,
								8
							],
							"hours": [
								10,
								15
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PipelineCopyDataFromFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TriggerTumblingDemo')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "TriggerTumblingDemo",
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "PipelineCopyDataFromFile",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Month",
					"interval": 1,
					"startTime": "2023-01-01T07:23:00Z",
					"endTime": "2023-02-28T07:23:00Z",
					"delay": "00:04:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"count": 2,
						"intervalInSeconds": 500
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PipelineCopyDataFromFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLServerLinkedService')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "SQLServerLinkedService",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIntegrationRuntimeDemo')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "SelfHostedIntegrationRuntimeDemo",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cached_Lookup_Transformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeSource",
							"description": "EmployeeSource"
						},
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "Emp",
							"description": "Emp"
						}
					],
					"sinks": [
						{
							"name": "CacheSink",
							"description": "CacheSink"
						},
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "CachedOutput",
							"description": "CachedOutput"
						}
					],
					"transformations": [
						{
							"name": "MaxEMPLOYEEID",
							"description": "MaxEMPLOYEEID"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> EmployeeSource",
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Emp",
						"EmployeeSource aggregate(EMPLOYEE_ID = max(EMPLOYEE_ID)) ~> MaxEMPLOYEEID",
						"Emp keyGenerate(output(IncrementalID as long),",
						"     startAt: 27L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(EMPLOYEE_ID = EMPLOYEE_ID + CacheSink#outputs()[1].MAX_EMPLOYEE_ID) ~> derivedColumn1",
						"MaxEMPLOYEEID sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          MAX_EMPLOYEE_ID = EMPLOYEE_ID",
						"     )) ~> CacheSink",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['CachedOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> CachedOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CastTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmpSource",
							"description": "EmpSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "CastTransformationOutput",
							"description": "CastTransformationOutput"
						}
					],
					"transformations": [
						{
							"name": "ConvertingDataType",
							"description": "ConvertingDataType"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpSource",
						"EmpSource cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          HIRE_DATE as date 'dd-MM-yyyy'",
						"     ),",
						"     errors: true) ~> ConvertingDataType",
						"ConvertingDataType sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['CastTransformationOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> CastTransformationOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConditionalSplitDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeDataSource",
							"description": "EmployeeDataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "OutputSetA"
						},
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "OutputSetB",
							"description": "OutputSetB"
						},
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "outputRemainingEmployee",
							"description": "outputRemainingEmployee"
						}
					],
					"transformations": [
						{
							"name": "DEPTwiseData",
							"description": "SETA"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeDataSource",
						"EmployeeDataSource split(equals(DEPARTMENT_ID,'10'),",
						"     equals(DEPARTMENT_ID,'20'),",
						"     disjoint: false) ~> DEPTwiseData@(SETA, SETB, RemainingEmployee)",
						"DEPTwiseData@SETA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['SETA'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSetA",
						"DEPTwiseData@SETB sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['OutputSetB'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSetB",
						"DEPTwiseData@RemainingEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['outputRemainingEmployee'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> outputRemainingEmployee"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CountEmployeeDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeSource",
							"description": "EmployeeSource"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DeptData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "TotalEMPDeptWise",
							"description": "TotalEMPDeptWise"
						}
					],
					"transformations": [
						{
							"name": "AggregateCountEmployee",
							"description": "AggregateCountEmployee"
						},
						{
							"name": "EMPDEPTDATA"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeSource",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DeptData",
						"EmployeeSource aggregate(groupBy(DEPARTMENT_ID),",
						"     EMPLOYEE_ID = count(EMPLOYEE_ID)) ~> AggregateCountEmployee",
						"AggregateCountEmployee, DeptData join(AggregateCountEmployee@DEPARTMENT_ID == DeptData@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> EMPDEPTDATA",
						"EMPDEPTDATA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['CountEMPDeptWise'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {DEPARTMENT NAME} = DEPARTMENT_NAME,",
						"          {TOTAL EMPLOYEE } = EMPLOYEE_ID",
						"     ),",
						"     partitionBy('hash', 1)) ~> TotalEMPDeptWise"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/DepartmentData')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DerivedEntityDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeedataSource",
							"description": "EmployeedataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "DerivedEntityOutput",
							"description": "DerivedEntityOutput"
						}
					],
					"transformations": [
						{
							"name": "CommisionDerivedColumn",
							"description": "CommisionDerivedColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeedataSource",
						"EmployeedataSource derive(COMMISSION_PCT = iif(isNull(COMMISSION_PCT),'0','1 %')) ~> CommisionDerivedColumn",
						"CommisionDerivedColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeeNew'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DerivedEntityOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmpDeptDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EMPSource",
							"description": "EMPSource"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DEPTSource",
							"description": "DEPTSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "OutputData",
							"description": "OutputData"
						}
					],
					"transformations": [
						{
							"name": "JoinEMPDEPT"
						},
						{
							"name": "ModifyColumns1",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EMPSource",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DEPTSource",
						"EMPSource, DEPTSource join(EMPSource@DEPARTMENT_ID == DEPTSource@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEMPDEPT",
						"JoinEMPDEPT derive(LAST_NAME = upper(LAST_NAME),",
						"          FIRST_NAME = upper(LAST_NAME)) ~> ModifyColumns1",
						"ModifyColumns1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Emp_dept_output_data'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          SALARY,",
						"          DEPARTMENT_NAME",
						"     ),",
						"     partitionBy('hash', 1)) ~> OutputData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/DepartmentData')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExistandNonExistDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeDataSource"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DeptDataSource",
							"description": "DeptDataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "ExistEntityOutput",
							"description": "ExistEntityOutput"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeDataSource",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DeptDataSource",
						"EmployeeDataSource, DeptDataSource exists(EmployeeDataSource@DEPARTMENT_ID == DeptDataSource@DEPARTMENT_ID,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ExistEmployeeoutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExistEntityOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/DepartmentData')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FilterDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "FilterDataSource",
							"description": "FilterDataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "FilterOutput",
							"description": "FilterOutput"
						}
					],
					"transformations": [
						{
							"name": "DeptFilter",
							"description": "DeptFilter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FilterDataSource",
						"FilterDataSource filter(equals(DEPARTMENT_ID,'110')) ~> DeptFilter",
						"DeptFilter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FilterEmpData'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> FilterOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flatten Transformation dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeJSonDatasource",
								"type": "DatasetReference"
							},
							"name": "EmployeeJsonSource",
							"description": "EmployeeJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "JS",
								"type": "DatasetReference"
							},
							"name": "FlattenTransformationOutput",
							"description": "FlattenTransformationOutput"
						}
					],
					"transformations": [
						{
							"name": "FlattenTransformation"
						}
					],
					"scriptLines": [
						"source(output(",
						"          employees as (Address as (Country as string, State as string, ZipCode as integer), Contact as (Email as string, Mobile as long), Id as short, Skill as string[], name as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> EmployeeJsonSource",
						"EmployeeJsonSource foldDown(unroll(employees.Skill),",
						"     mapColumn(",
						"          Skill = employees.Skill,",
						"          Id = employees.Id,",
						"          Address = employees.Address,",
						"          Contact = employees.Contact",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenTransformation",
						"FlattenTransformation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FlattenTransformationOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> FlattenTransformationOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EmployeeJSonDatasource')]",
				"[concat(variables('factoryId'), '/datasets/JS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FuzzyJoinDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Sales",
								"type": "DatasetReference"
							},
							"name": "Sales",
							"description": "Sales"
						},
						{
							"dataset": {
								"referenceName": "Sales1",
								"type": "DatasetReference"
							},
							"name": "Sales1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "FuzzyJoinOutput",
							"description": "FuzzyJoinOutput"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Name } as string,",
						"          total_sales as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     ignoreNoFilesFound: false) ~> Sales",
						"source(output(",
						"          {Name } as string,",
						"          total_sales as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Sales1",
						"Sales, Sales1 join(fuzzyCompare(Sales@{Name }, Sales1@{Name }, 66.00),",
						"     joinType:'inner',",
						"     matchType:'fuzzy',",
						"     ignoreSpaces: false,",
						"     broadcast: 'off')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FuzzyJoinOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> FuzzyJoinOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Sales')]",
				"[concat(variables('factoryId'), '/datasets/Sales1')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenderConvertInt')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Convert Gender in One and Zero",
				"type": "UDFLibrary",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [],
					"scriptLines": [
						"GenderConversionInt(string) as string = iif(i1=='male','0','1')"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeSource",
							"description": "EmployeeSource"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DepartmentSource",
							"description": "DepartmentSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "LookupOutput",
							"description": "LookupOutput"
						}
					],
					"transformations": [
						{
							"name": "EmployeeLookup",
							"description": "EmployeeLookup"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeSource",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DepartmentSource",
						"EmployeeSource, DepartmentSource lookup(EmployeeSource@DEPARTMENT_ID == DepartmentSource@DEPARTMENT_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> EmployeeLookup",
						"EmployeeLookup sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['LookupOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> LookupOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/DepartmentData')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NewBranchDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeSource",
							"description": "EmployeeSource"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "Department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "NewBranchOutput",
							"description": "NewBranchOutput"
						},
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "TotalEmp",
							"description": "TotalEmp"
						}
					],
					"transformations": [
						{
							"name": "CountOfEmployee",
							"description": "CountOfEmployee"
						},
						{
							"name": "EmpDeptJoin",
							"description": "Inner join on 'EmployeeSource' and 'DepartmentSource'"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeSource",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Department",
						"EmployeeSource aggregate(groupBy(DEPARTMENT_ID),",
						"     All_employee = count(EMPLOYEE_ID)) ~> CountOfEmployee",
						"EmployeeSource, Department join(EmployeeSource@DEPARTMENT_ID == Department@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> EmpDeptJoin",
						"EmpDeptJoin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['NewBranchOutput1'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> NewBranchOutput",
						"CountOfEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['TotEMP'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> TotalEmp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/DepartmentData')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParseTranformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParseTransformJsonInput",
								"type": "DatasetReference"
							},
							"name": "EMployeeJson",
							"description": "EMployeeJson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "JS",
								"type": "DatasetReference"
							},
							"name": "OutputSink",
							"description": "OutputSink"
						}
					],
					"transformations": [
						{
							"name": "parse1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Skill as string,",
						"          Id as integer,",
						"          Address as (Country as string, State as string, ZipCode as integer),",
						"          Contact as (Email as string, Mobile as integer)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> EMployeeJson",
						"EMployeeJson parse(ParseAddress = Skill ? (Country as string,",
						"          State as string),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: ',',",
						"     nullValue: '') ~> parse1",
						"parse1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['OutputSink'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParseTransformJsonInput')]",
				"[concat(variables('factoryId'), '/datasets/JS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PivotDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PivotEmpSource",
								"type": "DatasetReference"
							},
							"name": "PivotEmpSource",
							"description": "PivotEmpSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "Pivotoutput",
							"description": "Pivotoutput"
						}
					],
					"transformations": [
						{
							"name": "EmpPivot"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          empname as string,",
						"          gender as string,",
						"          deptid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PivotEmpSource",
						"PivotEmpSource pivot(groupBy(deptid),",
						"     pivotBy(gender),",
						"     Count = count(empid),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> EmpPivot",
						"EmpPivot sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Pivotoutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Pivotoutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PivotEmpSource')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RankTansformationDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "RankTansformationDataflow",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeDataSource",
							"description": "EmployeeDataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "RankTransformationOutput",
							"description": "RankTransformationOutput"
						}
					],
					"transformations": [
						{
							"name": "RankDepartmentWise",
							"description": "RankDepartmentWise"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> EmployeeDataSource",
						"EmployeeDataSource rank(asc(SALARY, true),",
						"     output(RankSalary as long),",
						"     dense: true) ~> RankDepartmentWise",
						"RankDepartmentWise sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['RankTransformationOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> RankTransformationOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelectDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeData",
							"description": "EmployeeData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "SelectDfOutput"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeData",
						"EmployeeData select(mapColumn(",
						"          {Employee Id} = EMPLOYEE_ID,",
						"          {Emloyee Email} = EMAIL,",
						"          {Employee Salary} = SALARY,",
						"          {Department Id} = DEPARTMENT_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['SelectDfOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SelectDfOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SortDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeSource",
							"description": "EmployeeSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "SortTransformationOutput",
							"description": "SortTransformationOutput"
						}
					],
					"transformations": [
						{
							"name": "SortTransformation",
							"description": "SortTransformation"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeSource",
						"EmployeeSource sort(asc(FIRST_NAME, true)) ~> SortTransformation",
						"SortTransformation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['SortEmployee'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SortTransformationOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SurrogateKeydataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SurrogateKeyEMPDataSet",
								"type": "DatasetReference"
							},
							"name": "SurrogateKeyEMPSOurce",
							"description": "SurrogateKeyEMPSOurce"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "SurrogateKeyOutput",
							"description": "SurrogateKeyOutput"
						}
					],
					"transformations": [
						{
							"name": "surrogateKeyEmp",
							"description": "surrogateKeyEmp"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emloyee_name as string,",
						"          Country as string,",
						"          department_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SurrogateKeyEMPSOurce",
						"SurrogateKeyEMPSOurce keyGenerate(output(EMPKEY as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyEmp",
						"surrogateKeyEmp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['SurrogateKeyOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SurrogateKeyOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SurrogateKeyEMPDataSet')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnionDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmployeeDataSource",
							"description": "EmployeeDataSource"
						},
						{
							"dataset": {
								"referenceName": "DepartmentData",
								"type": "DatasetReference"
							},
							"name": "DeptDataSource",
							"description": "DeptDataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "UnionDFOutput",
							"description": "UnionDFOutput"
						}
					],
					"transformations": [
						{
							"name": "EmployeeUnionAll"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmployeeDataSource",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DeptDataSource",
						"EmployeeDataSource, DeptDataSource union(byName: true)~> EmployeeUnionAll",
						"EmployeeUnionAll sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['UnionOutputFile'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> UnionDFOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/DepartmentData')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UserDefineFunctionDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Check in derived column Function Expression",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmpgenderDataSource",
							"description": "EmpgenderDataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "GendrConversionOutput"
						}
					],
					"transformations": [
						{
							"name": "DerivedGender"
						}
					],
					"udfLibraries": [
						{
							"referenceName": "GenderConvertInt",
							"type": "DataFlowReference"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as short,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as short,",
						"          GENDER as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> EmpgenderDataSource",
						"EmpgenderDataSource derive(GENDER = GenderConversionInt(GENDER)) ~> DerivedGender",
						"DerivedGender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['GendrConversionOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> GendrConversionOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/GenderConvertInt')]",
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WindowTransformationDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WindowTransformationDF",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmpSource",
							"description": "EmpSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpDeptOutputDataset",
								"type": "DatasetReference"
							},
							"name": "WindowTranformationOutput",
							"description": "WindowTranformationOutput"
						}
					],
					"transformations": [
						{
							"name": "WindowTransformation"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpSource",
						"EmpSource window(over(DEPARTMENT_ID),",
						"     Average_salary = avg(SALARY)) ~> WindowTransformation",
						"WindowTransformation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['WindowTranformationOutput'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> WindowTranformationOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]",
				"[concat(variables('factoryId'), '/datasets/EmpDeptOutputDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WriteCacheSink')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WriteCacheSink",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EMPDataSorce",
								"type": "DatasetReference"
							},
							"name": "EmpSource",
							"description": "EmpSource"
						}
					],
					"sinks": [
						{
							"name": "CacheSink"
						}
					],
					"transformations": [
						{
							"name": "MaxSalary",
							"description": "MaxSalary"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpSource",
						"EmpSource aggregate(Max_Sal = max(SALARY)) ~> MaxSalary",
						"MaxSalary sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1) ~> CacheSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EMPDataSorce')]"
			]
		}
	]
}