{
	"name": "LookupDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "EMPDataSorce",
						"type": "DatasetReference"
					},
					"name": "EmployeeSource",
					"description": "EmployeeSource"
				},
				{
					"dataset": {
						"referenceName": "DepartmentData",
						"type": "DatasetReference"
					},
					"name": "DepartmentSource",
					"description": "DepartmentSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "EmpDeptOutputDataset",
						"type": "DatasetReference"
					},
					"name": "LookupOutput",
					"description": "LookupOutput"
				}
			],
			"transformations": [
				{
					"name": "EmployeeLookup",
					"description": "EmployeeLookup"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPLOYEE_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          EMAIL as string,",
				"          PHONE_NUMBER as string,",
				"          HIRE_DATE as string,",
				"          JOB_ID as string,",
				"          SALARY as string,",
				"          COMMISSION_PCT as string,",
				"          MANAGER_ID as string,",
				"          DEPARTMENT_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> EmployeeSource",
				"source(output(",
				"          DEPARTMENT_ID as string,",
				"          DEPARTMENT_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DepartmentSource",
				"EmployeeSource, DepartmentSource lookup(EmployeeSource@DEPARTMENT_ID == DepartmentSource@DEPARTMENT_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> EmployeeLookup",
				"EmployeeLookup sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['LookupOutput'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> LookupOutput"
			]
		}
	}
}